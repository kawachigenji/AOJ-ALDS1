#include <bits/stdc++.h>
#define PI 3.14159265359
using namespace std;
const int64_t MOD = 1e9 + 7;

int cnt;

vector<int> merge(vector<int> A, int n, int left, int mid, int right) {
	vector<int> L(n / 2 + 2), R(n / 2 + 2);
	int n1 = mid - left;
	int n2 = right - mid;

	cout << "left:" << left << endl;
	cout << "mid:" << mid << endl;
	cout << "right:" << right << endl;

	for (int i = 0; i < n1; i++) {
		L.at(i) = A.at(left + i);
		cout << L.at(i);
		if (i == n1 - 1) cout << endl;
		else cout << ' ';
	}

	for (int i = 0; i < n2; i++) {
		R.at(i) = A.at(mid + i);
		cout << R.at(i);
		if (i == n2 - 1) cout << endl;
		else cout << ' ';
	}

	int i = 0, j = 0;
	for (int k = left; k < right; k++) {
		cnt++;

		if (L.at(i) <= R.at(j)) {
			A.at(k) = L.at(i++);
		}
		else {
			A.at(k) = R.at(j++);
		}
	}

	return A;
}

vector<int> mergeSort(vector<int> A, int n, int left, int right) {
	if (left + 1 < right) {
		int mid = (left + right) / 2;
		A=mergeSort(A, n, left, mid);
		A=mergeSort(A, n, mid, right);
		A = merge(A, n, left, mid, right);
	}

	return A;
}

int main() {
	int n;
	cin >> n;
	vector<int> A(n);

	for (int i = 0; i < n; i++) {
		cin >> A.at(i);
	}

	auto B = mergeSort(A, n, 0, n);

	for (int i = 0; i < n; i++) {
		if (i) cout << ' ';
		cout << B.at(i);
	}
	cout << endl;

	cout << cnt << endl;

	return 0;
}
